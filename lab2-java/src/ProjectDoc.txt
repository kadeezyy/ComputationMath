public class LinearSystem<N extends BigDecimal, T extends Equation<N, T>> {
    private List<T> list = new ArrayList<T>(); //список уравнений
    public T get(int index){
        Возвращает уравнение из линейной системы по указанному индексу.
    }

     public List<T> getAll(){
        Возвращает список всех уравнений в линейной системе.
     }

    public void push(T val) {
        Добавляет уравнение в линейную систему.
    }


    public int size(){
        Возвращает количество уравнений в линейной системе.
    }

    public N itemAt(int i, int j) {
        Получает коэффициент по указанной позиции (строка i, столбец j) в линейной системе.
    }

    public boolean replace(int index, int to){
        Заменяет уравнение по указанному индексу на уравнение с целевым индексом.
        Если замена успешна, возвращает true, иначе возвращает false.
    }
}


//Реализация интерфейса линейного уравнения
public class MyEquation implements Equation<BigDecimal, MyEquation> {
    /*
    * Реализует основные функции интерфейса Gauss
    */
}

public interface Equation<N extends BigDecimal, T extends Equation<N, T>> {
    public void addEquation(T item);
    public void mul(N coefficient);
    public N findCoefficient(N a, N b);
    public N at(int index);
    public int size();
    public void set(int index, N value);
}

public class Algorithm<N extends BigDecimal, T extends Equation<N, T>> {
    /**
     * Решает систему линейных уравнений методом Гаусса-Зейделя.
     *
     * @param linearSystem  система линейных уравнений
     * @param x             список начальных приближений
     * @param maxIterations максимальное количество итераций
     * @param epsilon       допустимая погрешность
     */
    public static void solveGaussSeidel(LinearSystem<BigDecimal, MyEquation> linearSystem,
                                        ArrayList<BigDecimal> x,
                                        int maxIterations,
                                        double epsilon) {
        /**
         * Метод solveGaussSeidel решает систему линейных уравнений методом Гаусса-Зейделя.
         * Он принимает на вход линейную систему linearSystem, список начальных приближений x,
         * максимальное количество итераций maxIterations и допустимую погрешность epsilon.
         *
         * Внутри метода происходит итеративный процесс решения системы уравнений. На каждой итерации
         * происходит обновление значений переменных x в соответствии с методом Гаусса-Зейделя.
         * При достижении заданной погрешности или максимального числа итераций процесс завершается.
         * В случае успешного завершения метод выводит сообщение о сходимости, а в случае
         * расхождения выводит сообщение о достижении максимального числа итераций и завершает
         * выполнение программы с кодом ошибки 1.
         */
    }

    /**
     * Проверяет наличие нулей на главной диагонали линейной системы.
     *
     * @param linearSystem линейная система уравнений
     * @return true, если нет нулей на главной диагонали, иначе false
     */
    public static boolean checkDiagonal(LinearSystem<BigDecimal, MyEquation> linearSystem) {
        /**
         * Метод checkDiagonal проверяет наличие нулей на главной диагонали линейной системы.
         * Он принимает на вход линейную систему linearSystem и возвращает true, если на главной
         * диагонали нет нулей, и false в противном случае.
         *
         * Внутри метода происходит итерация по каждому уравнению системы. Для каждого уравнения
         * проверяется значение на главной диагонали. Если найден ноль, метод ищет строку,
         * где значение на главной диагонали не равно нулю, и производит перестановку строк.
         * Если такая строка найдена, происходит замена текущей строки на найденную строку.
         * Если такой строки не найдено, метод возвращает false, указывая на невозможность
         * выполнения перестановки и продолжение решения системы. В случае отсутствия нулей
         * на главной диагонали метод возвращает true.
         */
    }
}

public class BoilerTemplate {
    /**
     * Считывает систему линейных уравнений из файла
     * Формат данных в файле должен быть следующий:
     * Размерность матрицы NxN
     * N строк с N + 1 столбцами, последний столбец - свободный член
     *
     * @param filename Имя файла в папке testcases на уроввне иерархии вместе с src/
     * @return Linear system from a specific file
     */
    public static LinearSystem<BigDecimal, MyEquation> readSystemFromFile(String filename) {
        /**
         * Метод readSystemFromFile считывает систему линейных уравнений из файла.
         * Он принимает на вход имя файла filename и возвращает объект типа LinearSystem,
         * представляющий систему уравнений, считанную из файла.
         *
         * Метод открывает файл для чтения, считывает первую строку, которая содержит размерность матрицы,
         * и устанавливает размерность по умолчанию. Затем метод проходит по оставшимся строкам файла и
         * считывает значения коэффициентов и свободных членов уравнений. Если размер считанной строки не
         * соответствует размерности матрицы, выбрасывается исключение ArithmeticException. Если в строке
         * найден пустой элемент, выбрасывается исключение NullPointerException. Все считанные уравнения
         * добавляются в объект LinearSystem. В случае возникновения исключения IOException, NumberFormatException
         * или NullPointerException метод выводит сообщение об ошибке и завершает программу с кодом ошибки 1.
         * В конце метод возвращает объект LinearSystem, содержащий считанную систему уравнений.
         */
    }

    /**
     * Создает список начальных приближений для метода Гаусса-Зейделя на основе системы линейных уравнений.
     *
     * @param linearSystem система линейных уравнений
     * @return список начальных приближений
     */
    public static ArrayList<BigDecimal> createInitialGuess(LinearSystem<BigDecimal, MyEquation> linearSystem) {
        /**
         * Метод createInitialGuess создает список начальных приближений для метода Гаусса-Зейделя
         * на основе системы линейных уравнений. Он принимает на вход систему линейных уравнений
         * linearSystem и возвращает список начальных приближений.
         *
         * Внутри метода создается копия системы linearSystem. Затем происходит итерация по уравнениям
         * системы. Для каждого уравнения производится вычисление коэффициента для каждой переменной.
         * Если индекс переменной не равен индексу текущего уравнения, коэффициент вычисляется
         * как отрицательное значение текущего коэффициента, деленное на коэффициент при текущей переменной
         * в текущем уравнении. Затем значение свободного члена текущего уравнения добавляется в список
         * начальных приближений. В конце метод возвращает список начальных приближений.
         */
    }

    /**
     * Создает список начальных приближений с нулевыми значениями для метода Гаусса-Зейделя
     * на основе системы линейных уравнений.
     *
     * @param linearSystem система линейных уравнений
     * @return список начальных приближений с нулевыми значениями
     */
    public static ArrayList<BigDecimal> createNullInitialGuess(LinearSystem<BigDecimal, MyEquation> linearSystem) {
        /**
         * Метод createNullInitialGuess создает список начальных приближений с нулевыми значениями
         * для метода Гаусса-Зейделя на основе системы линейных уравнений. Он принимает на вход
         * систему линейных уравнений linearSystem и возвращает список начальных приближений с нулевыми значениями.
         *
         * Внутри метода создается пустой список начальных приближений. Затем происходит итерация
         * по переменным системы linearSystem, и для каждой переменной добавляется значение BigDecimal.ZERO
         * в список начальных приближений. В конце метод возвращает список начальных приближений.
         */
    }

    /**
         * Выводит СЛАУ в стандартный поток вывода
         * @param system Линейная система для печати
         */
        public static void printSystem(LinearSystem<BigDecimal, MyEquation> system) {
            1. Для каждого уравнения в системе:
               - Получает текущее уравнение.
               - Создает StringBuilder для формирования строки вывода.
               - Для каждого элемента в уравнении:
                 - Если это последний элемент, добавляет разделитель "|".
                 - Добавляет текущий элемент уравнения в формате " %8.2f; ".
               - Выводит полученную строку.
            2. Выводит пустую строку для отделения вывода.
        }

        /**
         * Выводит массив чисел в стандартный поток вывода
         * @param x Массив элементов типа BigDecimal
         */
        public static void printVector(ArrayList<BigDecimal> x) {
            1. Создает StringBuilder для формирования строки вывода.
            2. Для каждого элемента в массиве:
               - Добавляет номер элемента и его значение в формате "x%d = %.2f; ".
            3. Выводит полученную строку.
        }

        /**
         * Выводит список чисел в стандартный поток вывода
         * @param x Список чисел типа, наследующего BigDecimal
         */
        public static void printArray(ArrayList<? extends BigDecimal> x) {
            1. Создает StringBuilder для формирования строки вывода.
            2. Для каждого числа в списке:
               - Добавляет его значение в формате "%.2f; ".
            3. Выводит полученную строку.
        }
}

